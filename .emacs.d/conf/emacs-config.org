#+TITLE: My emacs conf file

*** Set up load path

 The variable =load-path= lists all the directories where Emacs should look for Elisp files.

 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
 (setq load-path
       (append
	(list
         (expand-file-name "~/.emacs.d/elpa"))
	load-path))
 #+END_SRC

** Packages

*** Activate all the packages.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(require 'package)
(package-initialize)
#+END_SRC

*** List of repositories containing packages.

1. elpa repo (from gnu)
2. [[http://melpa.milkbox.net/#/][melpa]] repo - contains packages updated daily.
3. [[http://melpa-stable.milkbox.net/#/][melpa-stable]] repo - [alternative to [[http://marmalade-repo.org/][Marmalade]]] It offers stable packages built automatically from git tags.
4. [[http://orgmode.org/elpa/][org]] repo - Org's package repository.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs

(when (>= emacs-major-version 24)
      (require 'package)
      (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                               ("melpa" . "http://melpa.org/packages/")
                               ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
                               ("org" . "http://orgmode.org/elpa/"))
      )
)

#+END_SRC

*** List of packages used in this configuration.


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs

(setq package-list
      (list

       'emmet-mode            ; emmet mode
       'esqlite               ; sqlite
       'f                     ; Modern API for working with files and directories
       'google-translate      ; translate in emacs
       'ido                   ; manage buffers
       'json-reformat         ; format JSON
       'js-comint             ; js interpreter
       'linum-relative        ; linum relative
       'magit                 ; git integration
       'magit-popup
       'multiple-cursors      ; ST-like multiple cursors
       'neotree               ; menu bar
       'nodejs-repl           ; nodeJS REPL
       'nyan-prompt
       'pcre2el               ; regexp syntax converter
       'phi-search            ; replace isearch
       'rainbow-delimiters    ; rainbowy parens/braces/...
       'request
       'smex                  ; M-x
       'tern                  ; Tern-powered JavaScript integration
       'yasnippet             ; snippets for emacs
       'zlc                   ; zsh for emacs
       'browse-kill-ring      ; kill-ring history

       ;;'zenburn-theme

       ;; popup
       'popup
       'popup-complete
       'popup-imenu
       'popup-kill-ring
       'popup-switcher

       ;; modes
       'angular-mode
       'arduino-mode
       'coffee-mode
       'dockerfile-mode
       'emmet-mode
       'go-mode
       'handlebars-mode
       'jade-mode
       'json-mode
       'js2-mode
       'js3-mode
       'markdown-mode
       'nyan-mode
       'php-mode
       'rust-mode
       'skewer-mode
       'toml-mode
       'top-mode
       'web-mode
       'racket-mode

       ;; helm
       'helm
       'helm-c-moccur
       'helm-c-yasnippet
       'helm-company
       'helm-smex
       'helm-projectile

       ;;'helm-core
       'helm-emmet
       'helm-swoop

       ;; company
       'company
       'company-arduino
       'company-c-headers
       'company-go
       'company-irony
       'company-php
       'company-tern
       'company-web

       ;; 'auto-complete         ; autocompletion
       ;; 'autocomplete-config   ; autocompletion conf
       ))


(package-initialize)

#+END_SRC


*** Check if all packages are installed.

if not all packages are installed, check one by one and install the missing ones.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(unless package-archive-contents
  (package-refresh-contents))

(dolist (package package-list)
  (unless (package-installed-p package)
        (package-install package)))

#+END_SRC

** Visual appearance

I turn =off= mouse interface early in startup to avoid momentary display.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(load "~/.emacs.d/font-lock+.el")
(add-to-list 'load-path "~/.emacs.d/sidebar.el/")
(add-to-list 'load-path "~/.local/share/icons-in-terminal/")
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'blink-cursor-mode) (blink-cursor-mode -1))
(if (fboundp 'use-file-dialog) (setq use-file-dialog nil))
(if (fboundp 'use-dialog-box) (setq use-dialog-box nil))
#+END_SRC

I prefer to disable Emacs' fringe.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(fringe-mode '(0 . 0))
#+END_SRC


Remove startup screen

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(when (display-graphic-p)
  (setq inhibit-startup-screen t)
)
#+END_SRC

Big window on startup

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC




Line number display

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(setq column-number-mode t)
(linum-relative-global-mode t)

(string-to-number (format-mode-line "%l"))
(setq linum-relative-current-symbol "->")
(setq linum-relative-format "%3s \u2502") ; "%3s \u2502"
(set-face-attribute 'linum nil :foreground "magenta")

(defadvice linum-update (around my-linum-update)
  (setq linum-relative-current-symbol (number-to-string (current-column)))
  ad-do-it)

(ad-activate 'linum-update)
#+END_SRC

highlight current line and custom window appearance

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(menu-bar-mode -1)

(global-hl-line-mode 1)
(set-face-background 'hl-line "#3e4446")
(set-face-foreground 'highlight nil)
#+END_SRC


Theme code (custom)

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (spacemacs-dark)))
 '(custom-safe-themes
   (quote
    ("f5512c02e0a6887e987a816918b7a684d558716262ac7ee2dd0437ab913eaec6" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" default)))
 '(fci-rule-color "#383838")
 '(nrepl-message-colors
   (quote
    ("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3")))
 '(package-selected-packages
   (quote
    (helm-smex rainbow-identifiers zlc ws-butler window-numbering which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package twittering-mode top-mode toml-mode tern-auto-complete sr-speedbar spacemacs-theme spaceline sos smex skewer-reload-stylesheets skewer-less rust-playground request rainbow-delimiters quelpa projectile popwin popup-switcher popup-kill-ring popup-imenu popup-complete phi-search persp-mode pcre2el paradox org-plus-contrib org-bullets open-junk-file nyan-prompt nyan-mode nodejs-repl neotree multi-term mpg123 move-text markdown-mode magit macrostep lorem-ipsum livid-mode linum-relative link-hint json-mode js3-mode js2-refactor js-doc js-comint jade-mode isend-mode info+ indent-guide ido-vertical-mode hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt helm-swoop helm-emmet helm-company helm-c-yasnippet helm-c-moccur handlebars-mode hackernews hacker-typer google-translate gh-md gh expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu esqlite eshell-z eshell-up eshell-prompt-extras eshell-git-prompt eshell-fringe-status eshell-did-you-mean eshell-autojump esh-help esh-buf-stack elscreen elisp-slime-nav dumb-jump dockerfile-mode dash-at-point company-web company-tern company-php company-go company-arduino column-enforce-mode coffee-mode clean-aindent-mode cargo browse-kill-ring auto-highlight-symbol auto-complete-c-headers auto-complete-auctex auto-compile angular-mode 2048-game)))
 '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
 '(vc-annotate-background "#2B2B2B")
 '(vc-annotate-color-map
   (quote
    ((20 . "#BC8383")
     (40 . "#CC9393")
     (60 . "#DFAF8F")
     (80 . "#D0BF8F")
     (100 . "#E0CF9F")
     (120 . "#F0DFAF")
     (140 . "#5F7F5F")
     (160 . "#7F9F7F")
     (180 . "#8FB28F")
     (200 . "#9FC59F")
     (220 . "#AFD8AF")
     (240 . "#BFEBBF")
     (260 . "#93E0E3")
     (280 . "#6CA0A3")
     (300 . "#7CB8BB")
     (320 . "#8CD0D3")
     (340 . "#94BFF3")
     (360 . "#DC8CC3"))))
 '(vc-annotate-very-old-color "#DC8CC3"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC

Nyan mode

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(nyan-mode)
#+END_SRC

** Code Editor / IDE

*** global config for all files

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(projectile-global-mode)
(rainbow-delimiters-mode)
(put 'dired-find-alternate-file 'disabled nil)
(setq load-prefer-newer t)
(helm-projectile-on)
(setq show-smartparens-delay 0)
(show-smartparens-global-mode +1)
#+END_SRC

*** associating files types and modes

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(add-to-list 'auto-mode-alist '("\\.js\\'" . (lambda() (indium) ))) ;; TODO
(add-to-list 'auto-mode-alist '("\\.jade\\'" . jade-mode))
(add-to-list 'auto-mode-alist '("\\.pug\\'" . jade-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . (lambda() (web-mode) (emmet-mode))))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.handlebars\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.coffee\\'" . coffee-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
(add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.sass\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.less\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . (lambda() (markdown-mode) (setq-default indent-tabs-mode nil)) ))
(add-to-list 'auto-mode-alist '("\\.c\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.racket\\'" . racket-mode))
#+END_SRC


*** JS configuration

Node as JS interpreter for js2-mode

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(require 'indium)
(add-hook 'js-mode-hook #'indium-interaction-mode)
#+END_SRC



*** Web dev configuration

Customizations for the web-mode

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(defun my-web-mode-hook ()
  "Web mode customization."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)

  (set-face-attribute 'web-mode-doctype-face nil :foreground "#1affff")
  (set-face-attribute 'web-mode-html-tag-face nil :foreground "#999999")
  (set-face-attribute 'web-mode-html-tag-bracket-face nil :foreground "#493e99")
  (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "#264d73")
  (set-face-attribute 'web-mode-html-attr-value-face nil :foreground "#336699")

  (set-face-attribute 'web-mode-function-call-face nil :foreground "#33d6ff")
  (set-face-attribute 'web-mode-function-name-face nil :foreground "#33d6ff")
  (setq web-mode-enable-css-colorization t)
  (set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3")

  (setq web-mode-enable-heredoc-fontification t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  )

(add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC

*** company-mode settings

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs

(global-company-mode)

(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 2)

(eval-after-load 'company
  '(progn
     (define-key company-active-map (kbd "TAB") 'company-complete-selection)
     (define-key company-active-map [tab] 'company-complete-selection)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas-minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

(global-set-key [backtab] 'tab-indent-or-complete)

#+END_SRC

*** Find files with filpr

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(setq fiplr-root-markers '(".git" ".svn"))
(setq fiplr-ignored-globs '((directories (".git" ".svn" "node_modules"))
                            (files ("*.jpg" "*.png" "*.zip" "*~"))))
#+END_SRC

*** Experiments

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
;; eval region js and insert
(defun node-js-eval-region-or-buffer ()
  "evaluate the region and 'node' it !"
  (interactive)
    (insert
     (shell-command-to-string
      (concat "node -e '"
	      (buffer-substring (mark) (point))
	      "';")))
    (setq deactivate-mark t))

;; eval region python and insert
(defun python-eval-region-or-buffer ()
  "evaluate the region and 'python' it !"
  (interactive)
    (insert
     (shell-command-to-string
      (concat "python -c '"
	      (buffer-substring (mark) (point))
	      "';")))
    (setq deactivate-mark t))

(defun custom-prompt (str)
  (interactive
   (list
    (read-string "my_prompt : ")))
  (when (string-match "^\:\\(.[[:digit:]]+\\)" str)
    (goto-line (string-to-number (match-string 1 str))))
  (when (string-match "^d\\([[:digit:]]+\\)" str)
    (dotimes (i (string-to-number (match-string 1 str))) (kill-line)))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq backup-directory-alist `(("." . "~/.emacs.d/backup")))

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+END_SRC

*** Duplicate line

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(defun duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
With argument N, make N copies.
With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region        ;Get region if active, otherwise line
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))
#+END_SRC

*** Split window and find file

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(defun  split-and-find-file-H ()
  "Split the window and open the find-file prompt"
  (interactive)
  (split-window-horizontally)
  (other-window 1)
  (fiplr-find-file)
  )

(defun  split-and-find-file-V ()
  "Split the window and open the find-file prompt"
  (interactive)
  (split-window-vertically)
  (other-window 1)
  (fiplr-find-file)
  )
#+END_SRC


** Shortcuts (minor-mode)

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(defvar custom-keys-map (make-keymap) "my custom shortcuts")

(define-key custom-keys-map (kbd "C-x C-<right>") 'split-and-find-file-H)
(define-key custom-keys-map (kbd "C-x C-<left>")  'split-and-find-file-H)
(define-key custom-keys-map (kbd "C-x C-<up>")    'split-and-find-file-V)
(define-key custom-keys-map (kbd "C-x C-<down>")  'split-and-find-file-V)

(define-key custom-keys-map (kbd "s-<left>")  'windmove-left)
(define-key custom-keys-map (kbd "s-<right>") 'windmove-right)
(define-key custom-keys-map (kbd "s-<up>")    'windmove-up)
(define-key custom-keys-map (kbd "s-<down>")  'windmove-down)

(define-key custom-keys-map (kbd "M-<left>")  'windmove-left)
(define-key custom-keys-map (kbd "M-<right>") 'windmove-right)
(define-key custom-keys-map (kbd "M-<up>")    'windmove-up)
(define-key custom-keys-map (kbd "M-<down>")  'windmove-down)

(define-key custom-keys-map (kbd "<f12>")  (lambda() (interactive) (multi-term-dedicated-open) (other-window 1)))
(define-key custom-keys-map (kbd "M-k")  'browse-kill-ring)
(define-key custom-keys-map (kbd "C-x C-x")  'delete-window)
(define-key custom-keys-map (kbd "C-x C-m")  'treemacs)

;; helm
(define-key custom-keys-map (kbd "M-x") 'helm-smex)
(define-key custom-keys-map (kbd "C-x C-f") 'fiplr-find-file)
(define-key custom-keys-map (kbd "C-x C-e") 'emmet-preview)

(define-key custom-keys-map (kbd "M-z") 'custom-prompt)
(define-key custom-keys-map (kbd "M-l") 'goto-line)

(define-key custom-keys-map (kbd "C-c C-c") 'comment-dwim)

(define-key custom-keys-map (kbd "C-d") 'duplicate-line-or-region)

(define-key custom-keys-map (kbd "C-c RET") 'mc/edit-lines)
(define-key custom-keys-map (kbd "C-c C-s") 'mc/mark-next-like-this-word)
(define-key custom-keys-map (kbd "C-c C-r") 'mc/mark-previous-like-this-word)

(define-key custom-keys-map (kbd "C-c C-<left>") 'hs-hide-all)
(define-key custom-keys-map (kbd "C-c C-<right>") 'hs-show-all)
(define-key custom-keys-map (kbd "C-c <left>") 'hs-hide-block)
(define-key custom-keys-map (kbd "C-c <right>") 'hs-show-block)

(define-key custom-keys-map (kbd "C-f") 'helm-swoop)

(define-minor-mode my-keys-minor-mode
"A minor mode so that my key settings override annoying major modes."
:init-value t
:lighter " my-keys"
:keymap custom-keys-map)

#+END_SRC

** multi-term keys (minor-mode)

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(defvar term-mode-keymap (make-keymap) "term-mode keymap.")

(define-key term-mode-keymap (kbd "s-<left>")  'windmove-left)
(define-key term-mode-keymap (kbd "s-<right>") 'windmove-right)
(define-key term-mode-keymap (kbd "s-<up>")    'windmove-up)
(define-key term-mode-keymap (kbd "s-<down>")  'windmove-down)

(define-key term-mode-keymap (kbd "M-<left>")  'windmove-left)
(define-key term-mode-keymap (kbd "M-<right>") 'windmove-right)
(define-key term-mode-keymap (kbd "M-<up>")    'windmove-up)
(define-key term-mode-keymap (kbd "M-<down>")  'windmove-down)
(define-key term-mode-keymap (kbd "M-x") 'helm-smex)

(define-key term-mode-keymap (kbd "C-c")  'term-interrupt-subjob)
(define-key term-mode-keymap (kbd "M-DEL") 'term-send-backward-kill-word)
(define-key term-mode-keymap (kbd "C-<right>") (lambda() (interactive) (term-send-raw-string "\e[1;5C")))
(define-key term-mode-keymap (kbd "C-<left>") (lambda() (interactive) (term-send-raw-string "\e[1;5D")))
(define-key term-mode-keymap (kbd "C-r") (lambda()(interactive) (term-send-raw-string "\C-r")))
(define-key term-mode-keymap (kbd "C-d") (lambda()(interactive) (term-send-raw-string "\C-d")))

(define-minor-mode my-term-minor-mode
"A minor mode so that I got a normal terminal."
:init-value nil
:lighter " my-term"
:keymap term-mode-keymap)

(add-hook 'term-mode-hook
(lambda()

(message "%s" "This is in term mode and hook enabled.")

(dolist (key '("\C-a" "\C-b" "\C-c" "\C-d" "\C-e" "\C-f" "\C-g"
"\C-h" "\C-k" "\C-l" "\C-n" "\C-o" "\C-p" "\C-q"
"\C-t" "\C-u" "\C-v" "\C-x" "\C-z" "\C-r" "\M-DEL" "\e"))
(local-unset-key key))

(my-keys-minor-mode -1)
(clean-aindent-mode -1)
(my-term-minor-mode 1)
))
#+END_SRC


** sidebar keymap and hook

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(require 'treemacs)

;; after-change-major-mode-hook
(add-hook 'after-change-major-mode-hook (lambda()
(when (eq major-mode 'treemacs-mode)
(interactive)
(linum-relative-global-mode nil)
(linum-mode -1)
)
))

#+END_SRC


** org-mode shift select
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(setq org-support-shift-select t)
#+END_SRC


** default minor mode values

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(my-keys-minor-mode 1)
(my-term-minor-mode -1)
#+END_SRC

** Atomic conf
*** trying to write a major-mode for editing textareas

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(require 'atomic-chrome)
(unless (zerop (call-process "lsof" nil nil nil "-i" ":64292"))
(atomic-chrome-start-server)
)

(define-derived-mode atomic-edit-mode fundamental-mode "atomic-edit-mode"
  "major mode for editing textareas on chrome."
;;  (delete-other-windows)
  (toggle-frame-maximized)
  (set-frame-size (selected-frame) 40000 20)
  (set-frame-position (selected-frame) 0 10000)
)

(setq atomic-chrome-buffer-open-style 'frame)
(setq atomic-chrome-default-major-mode 'atomic-edit-mode)
#+END_SRC
