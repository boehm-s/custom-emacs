extern crate ws;
extern crate clap;
extern crate openssl;
extern crate env_logger;

use std::rc::Rc;
use openssl::ssl::{Ssl, SslContext, SslMethod};
use openssl::x509::X509FileType;


struct Server {
    out: ws::Sender,
    ssl: Rc<SslContext>,
}

impl ws::Handler for Server {
    fn on_message(&mut self, msg: ws::Message) -> ws::Result<()> {
        self.out.send(msg) // simple echo
    }

    fn build_ssl(&mut self) -> ws::Result<Ssl> {
        Ssl::new(&self.ssl).map_err(ws::Error::from)
    }
}

fn main () {
    env_logger::init().unwrap();

    // setup command line arguments
    // let matches = clap::App::new("WS-RS SSL Server Configuration")
    //     .version("1.0")
    //     .author("Jason Housley <housleyjk@gmail.com>")
    //     .about("Establish a WebSocket server that encrypts and decrypts messages.")
    //     .arg(clap::Arg::with_name("ADDR")
    //          .help("Address on which to bind the server.")
    //          .required(true)
    //          .index(1))
    //     .arg(clap::Arg::with_name("CERT")
    //          .help("Path to the SSL certificate.")
    //          .required(true)
    //          .index(2))
    //     .arg(clap::Arg::with_name("KEY")
    //          .help("Path to the SSL certificate key.")
    //          .required(true)
    //          .index(3))
    //     .get_matches();

    let mut context = SslContext::new(SslMethod::Tlsv1).unwrap();
    context.set_certificate_file(/*matches.value_of("CERT").unwrap()*/ "/etc/ssl/certs/ssl-cert-snakeoil.pem", X509FileType::PEM).unwrap();
    context.set_private_key_file(/*matches.value_of("KEY").unwrap()*/ "/etc/ssl/private/ssl-cert-snakeoil.key", X509FileType::PEM).unwrap();

    let context_rc = Rc::new(context);

    ws::Builder::new().with_settings(ws::Settings {
        encrypt_server: true,
        ..ws::Settings::default()
    }).build(|out: ws::Sender| {
        Server {
            out: out,
            ssl: context_rc.clone(),
        }
    }).unwrap().listen(/*matches.value_of("ADDR").unwrap()*/ "127.0.0.1:3001").unwrap();
}
