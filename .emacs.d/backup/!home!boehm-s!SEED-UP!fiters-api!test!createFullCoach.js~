const createFullCoach = finalCB => {
    const request = require('supertest');
    const should = require('should');
    const app = require('../app');
    const isCoachLoggedIn = require('../middlewares/isCoachLoggedIn');
    const randomstring = require('randomstring');

    /* All variables */
    let version = '1.1.1';
    let firstname = 'test-1';
    let lastname = 'TEST-1';
    let phone_prefix_indicator = '+33';
    let phone_number = '606060601';
    let currency = 'euros';
    let tutorial = true;
    let status = 0;
    let stripe_id = '1sdf3dsf212-56sdf413sdf21';
    let birthdate = '01/01/97';
    let gender = 0;
    let username = 'test_1';
    let salt = 'salt-1';
    let password = 'passwd-1';
    let active = true;
    let email = Math.random()+'test-1@email.net';
    let lat = 1;
    let lng = 2;
    let pos = '0101000020E61000000000000000000040000000000000F03F';
    let photo_url = 'https://s-media-cache-ak0.pinimg.com/originals/09/a5/97/09a5971659ce3d91a5770f78862a8094.jpg';
    let legal_entity = {
        type: "individual",
        first_name: firstname,
        last_name: lastname,
        dob: {
	    day: birthdate.split('/')[2],
	    month: birthdate.split('/')[1],
	    year: birthdate.split('/')[0]
        }
    };
    let tos_acceptance = {
    };
    let TOKEN = null;
    let USER_TOKEN = null;
    let ID = null;
    let new_firstname = randomstring.generate({ length: 7 });
    let new_lastname = randomstring.generate({ length: 7 });


    /* Generate week planning */
    const d_ = Math.round(Date.now() / 1000);
    var d = +new Date((d_ - (d_ % 86400)) * 1000);
    const nextDay = (d, i) => +new Date(d + i*86400000) / 1000;
    const randBool = () => Math.random > 0.3;
    const getWeek = date => {
        date = new Date(date);
        let onejan = new Date(date.getFullYear(), 0, 1);
        return Math.ceil((((date - onejan) / 86400000) + onejan.getDay() + 1) / 7);
    };

    while (new Date(d).getDay() != 1) {
        d -= 86400000;
        console.log('.');
    }

    let weeks = Array(14).fill().map((el, i) => {return {day: nextDay(d, i), availableMorning: randBool(), availableNoon: randBool(), availableAfternoon: randBool(), availableEvening: randBool()};});
    let secondWeek = weeks.splice(7, 14);
    let firstWeek = weeks;
    let data = JSON.stringify({
        firstWeek: firstWeek,
        secondWeek: secondWeek,
        firstWeekNumber: getWeek(firstWeek[0].day),
        secondWeekNumber: getWeek(secondWeek[0].day)
    });


    /* Should create and connect (token) one coach ... */
    const f1 = cb => {
        request(app)
            .post('/api/v1/subscribe/coach')
            .type('form')
            .send({'version': version})
            .send({'firstname': firstname})
            .send({'lastname': lastname})
            .send({'phonePrefixNumber': phone_prefix_indicator})
            .send({'phoneNumber': phone_number})
            .send({'currency': currency})
            .send({'tutorial': tutorial})
            .send({'status': status})
            .send({'stripeId': stripe_id})
            .send({'birthDate': birthdate})
            .send({'gender': gender})
            .send({'username': username})
            .send({'salt': salt})
            .send({'password': password})
            .send({'active': active})
            .send({'email': email})
            .send({'photoUrl': photo_url})
            .send({'legal_entity': legal_entity})
            .end((err, response) => {
                if (err)
                    console.error(err);
                TOKEN = response.body.data.token;
                cb(response.body.data);
            });
    };

    /* validate coach account*/
    const f2 = cb => {
        request(app)
            .get('/api/v1/coachs/validation/' + TOKEN)
            .end((err, response) => {
                if (err)
                    console.error(err);

                cb(response.body.data);
            });
    };

    /* set coach planning */
    const f3 = cb => {
        request(app)
            .put('/api/v1/coachs/me/planning')
            .type('form')
            .set({'Authorization': TOKEN})
            .send({'data': data})
            .end((err, response) => {
                if (err)
                    console.error(err);
                cb(response.body.data);
            });
    };

    /* update coach location */
    const f4 = cb => {
        request(app)
            .post('/api/v1/coachs/me/location')
            .type('form')
            .set({'Authorization': TOKEN})
            .send({'latitude': lat})
            .send({'longitude': lng})
            .end((err, response) => {
                if (err)
                    console.error(err);
                cb(response.body.data);
            });
    };

    f1(res1 => f2(res2 => f3(res3 => f4(res4 => {
        finalCB({resSubscribe: res1, resValidation: res2, resPlanning: res3, planning: data, resLocation: res4, location: {lat, lng}});
    }))));
};

createFullCoach(res => console.log(res));
