<?php
class DataBase {
  // we define 3 attributes
  // they are public so that we can access them using $post->author directly
  public $firstname;
  public $lastname;
  public $email;
  public function __construct($firstname, $lastname, $email) {
    $this->firstname = $firstname;
    $this->lastname  = $lastname;
    $this->email     = $email;
  }

  public static function liste() {
    $db = Db::getInstance();
    $sql = "SHOW DATABASES";
    $req = $db->prepare($sql);
    $list = [];
    try {
      $req->execute();
      $res = $req->fetchAll();
      $result = [];
      forEach($res as $value) {
        array_push($result, $value[0]);
      }

      for ($i=0; isset($result[$i]); $i++) {
        $tmp = new stdClass();
        $tmp->name = $result[$i];
        $tmp->tables = array();
        Db::updateInstance($result[$i]);
        $db = Db::getInstance();
        $req = $db->prepare("SHOW TABLES");
        $req->execute();
        $res = $req->fetchAll();
        for ($j=0; isset($res[$j]) ; $j++) {
          array_push($tmp->tables,$res[$j][0]);
        }
        array_push($list, $tmp);
      }
      $json = json_encode($list);
      return $json;
    } catch (Exception $e) {
      print_r($e);
    }

  }

  public static function rename($previousName, $newName) {
    $string = file_get_contents("./config.json");
    $config = json_decode($string);
    $db = Db::getInstance();
    $d = strval(time());
    shell_exec("mysqldump -u root -p'$config->password' -R $previousName > /tmp/$d.sql");
    shell_exec("mysqladmin -u root -p'$config->password' create $newName");
    shell_exec("mysql -u root -p'$config->password' $newName < /tmp/$d.sql");
    shell_exec("rm $d.sql");
    try {
      $db->query("DROP DATABASE $previousName");
    } catch (Exception $e) {
      return  ($e->getMessage());
    }
    return ("done");
  }

  public static function create($name) {
    $db = Db::getInstance();
    $req = $db->exec("CREATE DATABASE IF NOT EXISTS $name" ); // NOT FCKING SAFE
    $post = $req->fetch();
  }

  public static function drop($name) {
    $db = Db::getInstance();
    $req = $db->query("DROP DATABASE $name");
    return "done";
  }

  public static function info($name) {
    $db = Db::getInstance();
    $sql = "
      SELECT
      (
        SELECT Min(create_time)
        FROM   information_schema.tables
        WHERE  table_schema = :dbName
      ) AS creation_date,
      (
        SELECT count(*)
        FROM   information_schema.tables
        WHERE  table_schema = :dbName
      ) AS table_number,
      (
        SELECT sum( data_length + index_length ) / (1024 * 1024)
        FROM information_schema.TABLES
        WHERE table_schema=:dbName
        GROUP BY table_schema
      ) AS size;
    ";
    $req = $db->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
    $req->execute(array(':dbName' => $name));
    $res = $req->fetchAll(PDO::FETCH_ASSOC);
    $json = json_encode($res[0]);
    return  $json;
  }
}
?>
