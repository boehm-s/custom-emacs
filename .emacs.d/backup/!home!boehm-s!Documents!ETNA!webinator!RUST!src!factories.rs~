extern crate iron;
extern crate iron_postgres_middleware as pg_middleware;
extern crate bodyparser;
extern crate serde_json;
extern crate pwhash;

use self::pwhash::bcrypt;

use utils::get_json_body;
use utils::verif_body;

use std::io::Read;

use iron::prelude::*;
use iron::status;
use iron::mime::Mime;

use pg_middleware::{PostgresReqExt};

use self::serde_json::Value;
//_____________________________________________________________________________________________________


pub fn register(req: &mut Request) -> IronResult<Response> {
    let res = get_json_body(req.get::<bodyparser::Json>());
    if !verif_body(vec!["email".to_string(), "username".to_string(), "password".to_string()] , &res) {
        return Ok(Response::with((status::BadRequest)))
    }

    let con = req.db_conn();
    let mut str_body = String::new();
    req.body.read_to_string(&mut str_body).unwrap();
    let obj = res.as_object().unwrap();

    let email = str::replace(&obj.get("email").unwrap().to_string(), "\"", "");
    let username = str::replace(&obj.get("username").unwrap().to_string(), "\"", "");
    let password = str::replace(&obj.get("password").unwrap().to_string(), "\"", "");
    let hash = bcrypt::hash(&password.to_string()).unwrap();

    con.execute("INSERT INTO users (email, username, password) VALUES ($1, $2, $3);", &[&email, &username, &hash]).unwrap();

    // let content_type = "application/json".parse::<Mime>().unwrap();
    Ok(Response::with((status::Ok)))
}

pub fn auth(req: &mut Request) -> IronResult<Response> {
    let res = get_json_body(req.get::<bodyparser::Json>());
    if !verif_body(vec!["email".to_string(), "username".to_string()] , &res) {
        return Ok(Response::with((status::BadRequest)))
    }

    let con = req.db_conn();
    let mut str_body = String::new();
    req.body.read_to_string(&mut str_body).unwrap();
    let obj = res.as_object().unwrap();

    let email = str::replace(&obj.get("email").unwrap().to_string(), "\"", "");
    let password = str::replace(&obj.get("password").unwrap().to_string(), "\"", "");
    let user_hash_req = &con.query("SELECT password FROM users WHERE email = $1", &[&email]).unwrap();

    let user_hash:String = user_hash_req.get(0).get(0);

    println!("{:?}", user_hash);
    println!("{:?}", &obj.get("password").unwrap().to_string());

    if bcrypt::verify(&password, &user_hash) == true {
        Ok(Response::with((status::Ok)))
    } else {
        Ok(Response::with((status::Unauthorized)))
    }
}
