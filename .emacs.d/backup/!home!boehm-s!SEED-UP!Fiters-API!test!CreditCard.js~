const randomstring = require('randomstring');
const request = require('supertest');
const should = require('should');
const app = require('../app');


var firstname = 'test-1',
lastname = 'TEST-1',
username = 'test_1',
email = Math.random()+'test-1@mail.net',
birthdate = '1995/07/14',
gender = 1,
phone_number = '606060601',
phone_prefix_indicator = '+33',
handicap = "",
status = 0,
password = 'passwd1';

var TOKEN = null;
var ID = null;

let new_firstname = randomstring.generate({ length: 7 });
let new_lastname = randomstring.generate({ length: 7 });


describe('User', () => {
    it('can create a new user through the API', done => {
        request(app)
        .post('/api/v1/users')
        .type('form')
        .send({ 'firstname': firstname})
        .send({ 'lastname': lastname })
        .send({ 'phoneNumber': phone_number })
        .send({ 'phonePrefixNumber': phone_prefix_indicator })
        .send({ 'email': email })
        .send({ 'birthDate': birthdate })  // TODO: Discuss format
        .send({ 'gender': gender })
        .send({ 'password': password })
        .expect(200).expect(function(res) {
            TOKEN = res.body.data.token;
            ID = res.body.data.id;
            res.body.data.firstname.should.equal(firstname);
            res.body.data.lastname.should.equal(lastname);
            res.body.data.email.should.equal(email);
            res.body.data.gender.should.equal(gender);
            res.body.data.status.should.equal(0);
            res.body.data.photoUrl.should.equal("/static/default_avatar.png");
            res.body.data.should.have.property("token");
            res.body.data.should.have.property("id");
        }).end(done);
    });

    it('Should connect ', done => {
        request(app)
        .post('/api/v1/auth')
        .type('form')
        .send({'login' : email})
        .send({'password' : password})
        .expect(200).expect(res => {
            res.body.status.should.equal(1);
        }).end(done);
    });

    it('fails to create a second user with the same email', done => {
        request(app)
        .post('/api/v1/users')
        .type('form')
        .send({ 'firstname': firstname})
        .send({ 'lastname': lastname })
        .send({ 'phoneNumber': phone_number })
        .send({ 'phonePrefixNumber': phone_prefix_indicator })
        .send({ 'email': email })
        .send({ 'birthDate': birthdate })  // TODO: Discuss format
        .send({ 'gender': gender })
        .send({ 'password': password })
        .expect(401).expect(function(res) {
        }).end(done);
    });

    it('should update user informations thanks to the API', function(done) {
        request(app)
        .put('/api/v1/users/me')
        .set({'Authorization': TOKEN})
        .type('form')
        .send({ 'firstname': new_firstname })
        .send({ 'lastname': new_lastname })
        .expect(200).expect(function(res) {
            res.body.data.firstname.should.equal(new_firstname);
            res.body.data.lastname.should.equal(new_lastname);
        }).end(done);
    });

    it('shouldn\'t update user bcs of wrong token', function(done) {
        request(app)
        .put('/api/v1/users/me')
        .set({'Authorization': 'wrongToken'})
        .expect(403).expect(function(res) {
        }).end(done);
    });


    it('should get user informations thanks to the API with token', function(done) {
        request(app)
        .get('/api/v1/users/me')
        .set({'Authorization': TOKEN})
        .send()
        .expect(200).expect(res => {
            res.body.status.should.equal(1);
            res.body.data.firstname.should.equal(new_firstname);
            res.body.data.lastname.should.equal(new_lastname);
            res.body.data.email.should.equal(email);
            res.body.data.gender.should.equal(gender);
            res.body.data.phoneNumber.should.equal(phone_number);
            res.body.data.phonePrefixNumber.should.equal(phone_prefix_indicator);
            res.body.data.status.should.equal(0);
            res.body.data.photoUrl.should.equal("/static/default_avatar.png");
            res.body.data.should.have.property("id");
        }).end(done);
    });


    it('should get user informations thanks to the API with ID', function(done) {
        request(app)
        .get('/api/v1/users/'+ID)
        .send()
        .expect(200).expect(res => {
            res.body.status.should.equal(1);
            res.body.data.firstname.should.equal(new_firstname);
            res.body.data.lastname.should.equal(new_lastname);
            res.body.data.email.should.equal(email);
            res.body.data.gender.should.equal(gender);
            res.body.data.phoneNumber.should.equal(phone_number);
            res.body.data.phonePrefixNumber.should.equal(phone_prefix_indicator);
            res.body.data.status.should.equal(0);
            res.body.data.photoUrl.should.equal("/static/default_avatar.png");
            res.body.data.should.have.property("id");
        }).end(done);
    });


    it('should delete user thanks to the API', function(done) {
        request(app)
        .delete('/api/v1/users/me')
        .set({'Authorization': TOKEN})
        .send()
        .expect(200).expect(res => {
            res.body.status.should.equal(1);
        }).end(done);
    });


    it.skip('fails to create a user with missing fields', done => {
    });
    it.skip('can login with new user', done => {
    });
});
