const Bookshelf = require('../bookshelf');
const config = require('../config');
const assignUser = require('../middlewares/isLoggedIn');
const accessControl = require('../middlewares/canModifyOtherId');
const Booking = require('../models/Booking');
const CreditCard = require('../models/CreditCard');
const AuthToken = require('../models/AuthToken');
const Coach = require('../models/Coach');
const User = require('../models/User');
const Admin = require('../models/Admin');
const Place = require('../models/Place');
const mail = require('../utils/mail');
const wrapPromise = require('../utils/wrapPromise');
const compose = require('connect-compose');
const bodyParser = require('body-parser');
const randomstring = require('randomstring');
const pricing = require("../utils/pricing");

const stripe = require('stripe')(config.stripe_api_key);

module.exports = compose([bodyParser.urlencoded({extended: true }), assignUser, wrapPromise(async function(req, res, next) {

    var userInSession = JSON.parse(req.body.userInSession);
    var booking = await Booking.getBookingById(req.params.id);

    var options = {};
    if (booking.coachActive)
	options.follow = true;
    if (booking.expressActive)
	options.expressPurchase = true;
    if (booking.roomActive)
	options.room = true;

    var amountToRefundPerUser = (booking.cautionAmount - pricing.getBookingPrice(options)) / userInSession.length;

    asyncLoop(userInSession.length, async function (loop) {
	// retrieve charge for each users

	var charge = await Bookshelf.knex.raw(`SELECT * FROM bookings_charge WHERE "bookingId" = ? AND "userId" = ?`, req.params.id, userInSession[loop.iteration()]);

	stripe.refunds.create({
	    charge: charge.chargeId,
	    amount: amountToRefundPerUser * 100 // Amount in cents
	}, (err, charge) => {
	    if (err && err.type === 'StripeCardError')
		return res.status(403).json({status: 0, message: "The card has been declined", data: err });
	    else if (err)
		return res.status(403).json({status: 0, message: err.type, data: err });

	    return loop.next();
	});

    }, () => res.status(200).json({status: 1, message: "success", data: null}));

})]);



const asyncLoop = (iterations, func, callback) => {
    var index = 0;
    var done = false;
    var loop = {
	next() {
	    if (done) return;
	    if (index < iterations) {
		index++;
		func(loop);
	    } else {
		done = true;
		callback();
	    }
	},
	iteration() {
	    return index - 1;
	},
	break() {
	    done = true;
	    callback();
	}
    };

    loop.next();
    return loop;
};
